// This is your Prisma schema file
// Using Supabase as PostgreSQL database
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  // Supabase 使用 public schema
  // schemas  = ["public"]
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // Nullable for OAuth users
  emailVerified DateTime?
  image         String?
  
  // OAuth
  accounts      Account[]
  sessions      Session[]
  
  // App-specific relations
  tests         AttackTest[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([email])
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Prompt Attack specific models
enum AttackType {
  PROMPT_INJECTION
  JAILBREAK
  CONTEXT_OVERFLOW
  ROLE_MANIPULATION
  DELIMITER_ATTACK
}

enum DefenseLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

model AttackTest {
  id            String       @id @default(cuid())
  
  // Test data
  input         String       @db.Text
  attackType    AttackType?
  defenseLevel  DefenseLevel @default(NONE)
  
  // Results
  blocked       Boolean      @default(false)
  blockReason   String?
  blockStage    String?
  threatScore   Int          @default(0)
  
  // LLM Response
  llmResponse   String?      @db.Text
  finalResponse String?      @db.Text
  
  // Metadata
  llmProvider   String       @default("openai")
  modelName     String?
  tokensUsed    Int?
  latencyMs     Int?
  
  // Relations
  userId        String?
  user          User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([userId])
  @@index([attackType])
  @@index([defenseLevel])
  @@index([createdAt])
}

